我在工作之余问过自己一个问题：假如工作中有这样一个需求，需要你把一些庞大的数据放在list里面，然后循环遍历出某一个值，这个时候我该怎么做？
带着这个疑问我去查询一些资料，灵光一现，我相当可以用多线程来分段查询list的想法，在这里我叫他为多线程多分法。
其中多线程多分法我又想到可以分为多段前遍历法和多段前后遍历法。
注意：系统cpu要多核否则耗费时间会比较长
开启线程池：
ExecutorService executor = Executors.newFixedThreadPool(4);
多线程多分法--多段前后遍历法：
/**
         *测试多线程多分法-前后遍历法
         */
        begin = System.currentTimeMillis();
        List<String> stringList = new ArrayList<>();
        executor.submit(new Runnable() {
            @Override
            public void run() {
                System.out.println("线程1------->>>"+Thread.currentThread().getName());
                long begin = System.currentTimeMillis();
                for (int i = 0;i<list.size()/2;i++){
                    if (stringList.size()>0){
                        break;
                    }
                    if ((int)list.get(i)==8905400){
                        System.out.println((int)list.get(i));
                        stringList.add("线程1");
                        break;
                    }
                }
                long end = System.currentTimeMillis();
                System.out.println("线程1："+(end-begin));
            }
        });
        executor.submit(new Runnable() {
            @Override
            public void run() {
                System.out.println("线程2------->>>"+Thread.currentThread().getName());
                long begin = System.currentTimeMillis();
                for (int i = list.size()/2;i>-1;i--){
                    if (stringList.size()>0){
                        break;
                    }
                    if ((int)list.get(i)==8905400){
                        System.out.println((int)list.get(i));
                        stringList.add("线程2");
                        break;
                    }
                }
                long end = System.currentTimeMillis();
                System.out.println("线程2："+(end-begin));
            }
        });
        executor.submit(new Runnable() {
            @Override
            public void run() {
                System.out.println("线程3------->>>"+Thread.currentThread().getName());
                long begin = System.currentTimeMillis();
                for (int i = (list.size()/2)+1;i<list.size();i++){
                    if (stringList.size()>0){
                        break;
                    }
                    if ((int)list.get(i)==8905400){
                        System.out.println((int)list.get(i));
                        stringList.add("线程3");
                        break;
                    }
                }
                long end = System.currentTimeMillis();
                System.out.println("线程3："+(end-begin));
            }
        });
        executor.submit(new Runnable() {
            @Override
            public void run() {
                System.out.println("线程4------->>>"+Thread.currentThread().getName());
                long begin = System.currentTimeMillis();
                for (int i = (list.size())-1;i>(list.size()/2)+1;i--){
                    if (stringList.size()>0){
                        break;
                    }
                    if ((int)list.get(i)==8905400){
                        System.out.println((int)list.get(i));
                        stringList.add("线程4");
                        break;
                    }
                }
                long end = System.currentTimeMillis();
                System.out.println("线程4："+(end-begin));
            }
        });
        while (CollectionUtils.isEmpty(stringList)){
            Thread.sleep(1);
        }
        end = System.currentTimeMillis();
        System.out.println("测试多线程多分法-前后遍历法：" + (end - begin) + "ms");
        System.out.println("---------------------");
 多线程多分法--多段前遍历法：
 /**
         *测试多线程多分法-多段前遍历法
         */
        begin = System.currentTimeMillis();
        List<String> stringList = new ArrayList<>();
        executor.submit(new Runnable() {
            @Override
            public void run() {
                System.out.println("线程1------->>>"+Thread.currentThread().getName());
                long begin = System.currentTimeMillis();
                for (int i = 0;i<list.size()/3;i++){
                    if (stringList.size()>0){
                        break;
                    }
                    if ((int)list.get(i)==8905400){
                        System.out.println((int)list.get(i));
                        stringList.add("线程1");
                        break;
                    }
                }
                long end = System.currentTimeMillis();
                System.out.println("线程1："+(end-begin));
            }
        });
        executor.submit(new Runnable() {
            @Override
            public void run() {
                System.out.println("线程2------->>>"+Thread.currentThread().getName());
                long begin = System.currentTimeMillis();
                for (int i = list.size()/3;i<(list.size()/3)*2;i++){
                    if (stringList.size()>0){
                        break;
                    }
                    if ((int)list.get(i)==8905400){
                        System.out.println((int)list.get(i));
                        stringList.add("线程2");
                        break;
                    }
                }
                long end = System.currentTimeMillis();
                System.out.println("线程2："+(end-begin));
            }
        });
        executor.submit(new Runnable() {
            @Override
            public void run() {
                System.out.println("线程3------->>>"+Thread.currentThread().getName());
                long begin = System.currentTimeMillis();
                for (int i = (list.size()/3)*2;i<list.size();i++){
                    if (stringList.size()>0){
                        break;
                    }
                    if ((int)list.get(i)==8905400){
                        System.out.println((int)list.get(i));
                        stringList.add("线程3");
                        break;
                    }
                }
                long end = System.currentTimeMillis();
                System.out.println("线程3："+(end-begin));
            }
        });
        while (CollectionUtils.isEmpty(stringList)){
            Thread.sleep(1);
        }
        end = System.currentTimeMillis();
        System.out.println("测试多线程多分法-多段遍历法：" + (end - begin) + "ms");
        System.out.println("---------------------");
